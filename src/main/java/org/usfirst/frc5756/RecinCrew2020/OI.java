// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5756.RecinCrew2020;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driverJoystick;
    public Joystick subsysJoystick;

    public Button powerCellWindowWhiperButton;
    public Button powercellOuttakeButton;
    public Button telescopicArmExtentionButton;
    public Button telescopicArmRetractionButton;
    public Button climboButton;
    public Button speedButton;
    public Button unwindClimbButton;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        //Command intakecell = new IntakeCell();
        subsysJoystick = new Joystick(0);
        powerCellWindowWhiperButton = new JoystickButton(subsysJoystick, 1);
        //powerCellIntakeButton.whileHeld(new IntakeCell());
        powercellOuttakeButton = new JoystickButton(subsysJoystick, 2);
        //powercellOuttakeButton.whileHeld(new ShootBall());
        telescopicArmExtentionButton = new JoystickButton(subsysJoystick, 5);
        telescopicArmRetractionButton = new JoystickButton(subsysJoystick, 6);
        climboButton = new JoystickButton(subsysJoystick, 3);
        unwindClimbButton = new JoystickButton(subsysJoystick,4);
        //telescopicArmExtentionButton.whileHeld(new RaiseClimbingHook());
        //telescopicArmRetractionButton.whileHeld(new LowerClimbHook());
        //climboButton.whenPressed(new Climb()); 

        
        driverJoystick = new Joystick(1);
       speedButton = new JoystickButton(driverJoystick, 6);
        // SmartDashboard Buttons
       // SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverJoystick() {
        return driverJoystick;
    }

    public Joystick getSubsysJoystick() {
        return subsysJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

